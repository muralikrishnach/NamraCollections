package com.jayam.impactapp.printer;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import com.jayam.impactapp.Base;
import com.jayam.impactapp.LastReceiptPrintMenu;
import com.jayam.impactapp.R;
import com.jayam.impactapp.common.DishaLogo;
import com.jayam.impactapp.common.FFSLLogo;
import com.jayam.impactapp.common.LOKLogo;
import com.jayam.impactapp.common.MfimoApp;
import com.jayam.impactapp.objects.PrintDetailsDO;
import com.jayam.impactapp.utils.PrinterCommands;
import com.jayam.impactapp.utils.UtilClass;

import com.jayam.impactapp.utils.UtilsClass;
import com.prowesspride.api.Printer_GEN;


import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.Log;

import static com.jayam.impactapp.printer.BluetoothChatService.outputStream;

/**
 * This thread runs during a connection with a remote device. It handles all
 * incoming and outgoing transmissions.
 */

class ConnectedThread {
	private static final String TAG = "ConnectedThread";
	private final BluetoothSocket mmSocket;
	private InputStream mmInStream = null;
	private OutputStream mmOutStream = null;
	public int nofByts = 0;
	private String message;
	private String totalAmt;
	private String AmtTobeCollected;
	int iRetVal;
	private Printer_GEN ptrGen;
	/////////////////// For print variables ////////////////////
	int[] packetBuffer = new int[5000];
	String ComData = null;
	int noBytes = 0, ct = 0, nofByts1 = 0, k = 0, totDataLen;;
	private int tempPacket[];
	private int packetLength = 0;
	private boolean available = false;
	private boolean timeoutFlag = false;
	/////////////////// For print variables ////////////////////

	File directory = null;
	private BluetoothDevice device;
	private BluetoothChatService btChatService;
	private String empty;
	private Object String;

	public ConnectedThread(BluetoothSocket socket, BluetoothDevice device, BluetoothChatService btChatService) {
		//


		this.btChatService = btChatService;
		Log.d(TAG, "create ConnectedThread");
		mmSocket = socket;
		InputStream tmpIn = null;
		OutputStream tmpOut = null;
		this.setDevice(device);
		// Get the BluetoothSocket input and output streams
		try {
			if (socket != null) {
				tmpIn = socket.getInputStream();
				tmpOut = socket.getOutputStream();
			} else {
				System.out.println("Socket is closed by the server");
			}
		} catch (IOException e) {
			Log.e(TAG, "temp sockets not created", e);
		}
		mmInStream = tmpIn;
		mmOutStream = tmpOut;
	}

	// To reset printer for finger print scan
	public void FPReset() {
		byte[] reset = new byte[8];
		reset[0] = (byte) 0x7e;
		reset[1] = (byte) 0xb2;
		reset[2] = (byte) 0xf0;
		reset[3] = (byte) 0x41;
		reset[4] = (byte) 0x42;
		reset[5] = (byte) 0x04;
		reset[6] = (byte) 0x45;

		try {
			Thread.sleep(2000);
			mmOutStream.write(reset);
			mmOutStream.flush();
			Thread.sleep(2000);
		} catch (Exception e) {
			e.printStackTrace();
			Log.d(TAG, "IO Error");
		}
	}









	public void readImagedata(final PrintDetailsDO detailsDO, String name, String LogoPrinting)
	// public void readImagedata(final PrintDetailsDO detailsDO)
	{
		Log.v("", "readImagedata0memthod");

		Log.v("","printLogo_Analogics_Annapurna");
		//printLogo_Analogics_Annapurna();









		for (int i = 0; i < detailsDO.allabels.size(); i++) {
			String lable = detailsDO.allabels.get(i);
			String value = detailsDO.alValues.get(i);
			try {
				Thread.sleep(500);
			} catch (Exception e) {
				e.printStackTrace();
			}

			if (value.equals("true")) {
				PrinterData(lable, 3, true);
			} else {
				PrinterData(lable, 3, false);
			}
		}

		cancel();

	}








	public void printLogo_Evolute_LOK() {// LOK image
		InputStream input = BluetoothChatService.inputStream;
		OutputStream outstream = outputStream;
		ptrGen = new Printer_GEN(Base.impressSetUp, outstream, input);
		ptrGen.iFlushBuf();
		iRetVal = ptrGen.iBmpPrint(MfimoApp.getAppContext(), R.raw.lok_ibl_logo);
		// iRetVal=ptrGen.iStartPrinting(1);
		Log.d("yesb", sCheckRetCode(iRetVal) + "after bitmap");
	}

	private static String sCheckRetCode(int iRetValue) {
		if (iRetValue == Printer_GEN.SUCCESS) {
			return "SUCCESS";
		} else if (iRetValue == Printer_GEN.FAILURE) {
			return "FAILURE";
		} else if (iRetValue == Printer_GEN.NOT_SUPPORTED) {
			return "NOT SUPPORTED";
		} else if (iRetValue == Printer_GEN.NO_RESPONSE) {
			return "NO RESPONSE";
		} else if (iRetValue == Printer_GEN.NOT_ACTIVATED) {
			return "NOT INITIALIZED";
		} else if (iRetValue == Printer_GEN.PARAM_ERROR) {
			return "PARAM ERROR";
		} else if (iRetValue == Printer_GEN.DEMO_VERSION) {
			return "DEMO VERSION";
		} else if (iRetValue == Printer_GEN.INVALID_DEVICE_ID) {
			return "INVALID DEVICE ID";
		} else if (iRetValue == Printer_GEN.PAPER_OUT) {
			return "PAPER OUT";
		} else if (iRetValue == Printer_GEN.PLATEN_OPEN) {
			return "PLATEN OPEN";
		} else if (iRetValue == Printer_GEN.HIGH_HEADTEMP) {
			return "HEADTEMP HIGH";
		} else if (iRetValue == Printer_GEN.LOW_HEADTEMP) {
			return "HEADTEMP LOW";
		} else if (iRetValue == Printer_GEN.IMPROPER_VOLTAGE) {
			return "IMPROPERVOLTAGE";
		} else if (iRetValue == Printer_GEN.BMP_FILE_ERROR) {
			return "FILE ERROR";
		} else if (iRetValue == Printer_GEN.NO_DATA) {
			return "NO DATA";
		} else {
			return "Invalid Error : ";
		}

	}

	public void readImagedata1(final PrintDetailsDO detailsDO, String name, String LogoPrinting)
	// public void readImagedata1(final PrintDetailsDO detailsDO)
	{

		Log.v("", "readImagedata1memthod");

//		InputStream input = BluetoothChatService.inputStream;
//		OutputStream outstream = outputStream;
//		ptrGen = new Printer_GEN(Base.impressSetUp, outstream, input);
//		ptrGen.iFlushBuf();
//		iRetVal = ptrGen.iBmpPrint(MfimoApp.getAppContext(), R.raw.ppfm);
//		// iRetVal=ptrGen.iStartPrinting(1);
//		Log.d("yesb", sCheckRetCode(iRetVal) + "after bitmap");


//		InputStream input = BluetoothChatService.inputStream;
//		OutputStream outstream = outputStream;
//		ptrGen = new Printer_GEN(Base.impressSetUp, outstream, input);
//		ptrGen.iFlushBuf();
//		iRetVal = ptrGen.iBmpPrint(MfimoApp.getAppContext(), R.raw.cbcmayn);
//		// iRetVal=ptrGen.iStartPrinting(1);
//		Log.d("yesb", sCheckRetCode(iRetVal) + "after bitmap");

	//	printLogo_Analogics_Lok();

		//printLogo_Analogics_Annapurna();




		printLogo_Analogics_Annapurna();


		for (int i = 0; i < detailsDO.allabels.size(); i++) {
			String lable = detailsDO.allabels.get(i);
			String value = detailsDO.alValues.get(i);

			Log.v("", "readImagedata1lable"+lable);

			Log.v("", "readImagedata1value"+value);

			try {
				Thread.sleep(500);
			} catch (Exception e) {
				e.printStackTrace();
			}

			if (value.equals("true")) {

				PrinterData_Analogics(lable+"\n", true);
			} else {
				PrinterData_Analogics(lable+"\n", false);
			}
		}

		cancel();

	}

	public void readImagedata2(final PrintDetailsDO detailsDO, String name, String LogoPrinting)
	// public void readImagedata1(final PrintDetailsDO detailsDO)
	{

		Log.v("", "readImagedata1memthod2");

//		InputStream input = BluetoothChatService.inputStream;
//		OutputStream outstream = outputStream;
//		ptrGen = new Printer_GEN(Base.impressSetUp, outstream, input);
//		ptrGen.iFlushBuf();
//		iRetVal = ptrGen.iBmpPrint(MfimoApp.getAppContext(), R.raw.ppfm);
//		// iRetVal=ptrGen.iStartPrinting(1);
//		Log.d("yesb", sCheckRetCode(iRetVal) + "after bitmap");






		for (int i = 0; i < detailsDO.allabels.size(); i++) {
			String lable = detailsDO.allabels.get(i);
			String value = detailsDO.alValues.get(i);

			try {
				Thread.sleep(500);
			} catch (Exception e) {
				e.printStackTrace();
			}

			if (value.equals("true")) {
				//PrinterData_Evolute(lable, true);
			} else {
				//	PrinterData_Evolute(lable, false);
			}
		}

		cancel();

	}

	public void cancel() {
		try {
			mmSocket.close();
		} catch (IOException e) {
			Log.e(TAG, "close() of connect socket failed", e);
		}
	}

	public void setDevice(BluetoothDevice device) {
		this.device = device;
	}

	public BluetoothDevice getDevice() {
		return device;
	}

	public int PrinterData(String data, int Font, boolean mAlign) {
		if (mAlign) {
			int space = 0;
			if (Font == 1 || Font == 2) {
				if (data.length() < 25) {
					space = 24 - data.length();
					for (int i = 0; i < space; i++) {
						if (i < (space / 2)) {
							data = " " + data;
						} else {
							data = data + " ";
						}
					}
				}
			} else if (Font == 3 || Font == 4) {
				if (data.length() < 42) {
					space = 42 - data.length();
					for (int i = 0; i < space; i++) {
						if (i < (space / 2)) {
							data = " " + data;
						} else {
							data = data + " ";
						}
					}
				}
			}
		}
		System.out.println("data:" + data + "datalength:" + data.length());
		int i = 0, j = 0, col = 0, la = 0;
		char[] tempBuffer = new char[1000];
		int[] dataBuffer = new int[5000];
		byte[] b = new byte[2];
		System.out.println(data);
		data.getChars(0, data.length(), tempBuffer, col);
		// int totDataLen = data.length();
		/////////////////////// PACKET FORMAT /////////////////////
		for (i = 0; la < data.length();) {
			if (Font == 1 || Font == 2) {
				if (Font == 1) {
					dataBuffer[i++] = 0xf0;
				} else if (Font == 2) {
					dataBuffer[i++] = 0xf1;
				}
				for (j = 0; j < 24; j++) {
					if (la < data.length()) {
						dataBuffer[i++] = tempBuffer[la++];
					} else {
						break;
					}
				}
			} else if (Font == 3 || Font == 4) {
				if (Font == 3) {
					dataBuffer[i++] = 0xf2;
				} else if (Font == 4) {
					dataBuffer[i++] = 0xf3;
				}
				for (j = 0; j < 42; j++) {
					if (la < data.length()) {
						dataBuffer[i++] = tempBuffer[la++];
					} else {
						break;
					}
				}
			}
		}
		/////////////////////// PACKET FORMAT /////////////////////
		try {
			SendPrint(dataBuffer, i, Font);
		} catch (IOException ex) {

		}
		return 1;
	}

//	    public int PrinterData_Analogics(String data, boolean mAlign) {
//
//
//
//		if (mAlign) {
//			Log.v("", "PrinterData_AnalogicsdataTrue"+data);
//		    int space = 0;
////		    if (data.length() < 38) {
////		    if (data.length() < 24) {
//		    if (data.length() < 42) {
//			//space = 38 - data.length();
//			space = 42 - data.length();
//			for (int i = 0; i < space; i++) {
//			    if (i < (space / 2)) {
//				data = " " + data;
//			    } else {
//				data = data + " ";
//			    }
//			}
//		    }
//		}
//
//		Log.v("", "PrinterData_Analogicselse"+data);
//		System.out.println("data:" + data + "datalength:" + data.length());
//		int i = 0, j = 0, col = 0, la = 0;
//		char[] tempBuffer = new char[1000];
//		int[] dataBuffer = new int[5000];
//		byte[] b = new byte[2];
//		System.out.println("systemout"+data);
//		data.getChars(0, data.length(), tempBuffer, col);
//		// int totDataLen = data.length();
//		/////////////////////// PACKET FORMAT /////////////////////
//		for (i = 0; la < data.length();) {
////		    for (j = 0; j < 38; j++) {
//
//			  for (j = 0; j < 42; j++) {
//			if (la < data.length()) {
//			    dataBuffer[i++] = tempBuffer[la++];
//			} else {
//			    break;
//			}
//		    }
//		}
//		/////////////////////// PACKET FORMAT /////////////////////
//		try {
//		    SendPrint_Analogics(dataBuffer, i, 1);
//		} catch (IOException ex) {
//
//		}
//		return 1;
//	    }


	public int PrinterData_Analogics(String data, boolean mAlign) {
		if (mAlign) {
			int space = 0;

			Log.v("","PrinterData_Analogicsdatalength"+data.length());
//			if (data.length() < 38) {
//				space = 38 - data.length();
//
//				Log.v("","PrinterData_Analogicsdspace"+space);
//				for (int i = 0; i < space; i++) {
//					if (i < (space / 2)) {
//					data = " " + data;
//
//						Log.v("","ifinifdatat--"+data);
//					} else {
//						data = data + " ";
//						Log.v("","elseinelsedatat--"+data);
//					}
//				}
//
//
//			}

			data = data + " ";
		}

		Log.v("","elsefinaldatat--"+data);

		int i = 0, j = 0, col = 0, la = 0;
		char[] tempBuffer = new char[1000];
		int[] dataBuffer = new int[5000];
		byte[] b = new byte[2];

		data.getChars(0, data.length(), tempBuffer, col);    //
		// int totDataLen = data.length();
		/////////////////////// PACKET FORMAT /////////////////////
		for (i = 0; la < data.length();) {
			for (j = 0; j < 38; j++) {
				if (la < data.length()) {
					dataBuffer[i++] = tempBuffer[la++];
				} else {
					break;
				}
			}
		}
		/////////////////////// PACKET FORMAT /////////////////////
		try {

			SendPrint_Analogics(dataBuffer, i, 3,mAlign);
		} catch (IOException ex) {

		}
		return 1;
	}



	public int SendPrint(int[] pData, int pLength, int Font) throws IOException {
		int[] pBuff = new int[1000];
		int n, lrc = 0, space = 0, i = 0, iBreak = 0, dataPack = 0, pPos = 0, pInc = 0;
		int iEvLength = 0;

		if (Font == 1 || Font == 2) {
			dataPack = pLength / 125 + 1;
		} else if (Font == 3 || Font == 4) {
			dataPack = pLength / 86 + 1;
		}

		System.out.println(dataPack);
		if (Font == 1 || Font == 2) {
			space = pLength % 125;
		} else if (Font == 3 || Font == 4) {
			space = pLength % 86;
		}
		/////////////////// APPENDING SPACES///////////////////
		if (Font == 1 || Font == 2) {
			for (i = 0;; i++) {
				iBreak = space % 25;
				if (iBreak == 0) {
					break;
				}
				pData[pLength++] = 0x20;
				space++;
			}
		} else if (Font == 3 || Font == 4) {
			for (i = 0;; i++) {
				iBreak = space % 43;
				if (iBreak == 0) {
					break;
				}
				pData[pLength++] = 0x20;
				space++;
			}
		}
		/////////////////// APPENDING SPACES///////////////////
		while (dataPack > 0) {
			pBuff[0] = 0x7e;
			pBuff[1] = 0xb2;
			if (Font == 1 || Font == 2) {
				pPos = pInc * 125;
				if (dataPack > 1) {
					iEvLength = 125;
				} else {
					iEvLength = pLength - pPos;
				}
			} else if (Font == 3 || Font == 4) {
				pPos = pInc * 86;
				if (dataPack > 1) {
					iEvLength = 86;
				} else {
					iEvLength = pLength - pPos;
				}
			}
			System.out.println("iEvLength=" + iEvLength + "Pos=" + pPos);
			System.arraycopy(pData, pPos, pBuff, 2, iEvLength);
			iEvLength = iEvLength + 2;
			pBuff[iEvLength++] = 0x04;

			for (n = 1; n < iEvLength; n++) {
				lrc ^= pBuff[n];
			}
			pBuff[iEvLength++] = lrc;
			try {
				for (k = 0; k < iEvLength; k++) {
					mmOutStream.write(pBuff[k]);
				}
				mmOutStream.flush();
				////sss
				//ReadPrinterresp();
			} catch (IOException ex) {
				ex.printStackTrace();
			}

			dataPack--;
			pInc++;
			lrc = 0;
		}
		return 1;
	}

//	    public int SendPrint_Analogics(int[] pData, int pLength, int Font) throws IOException {
//
//
//
//	    	System.out.println("SendPrint_Analogics---");
//		int[] pBuff = new int[1000];
//		int n, lrc = 0, space = 0, i = 0, iBreak = 0, dataPack = 0, pPos = 0, pInc = 0;
//		int iEvLength = 0;
//
//		dataPack = pLength / 38 + 1;
//
//		System.out.println("datapack---"+dataPack);
//		space = pLength % 38;
//		/////////////////// APPENDING SPACES///////////////////
//		for (i = 0;; i++) {
//		    iBreak = space % 38;
//		    if (iBreak == 0) {
//			break;
//		    }
//		    pData[pLength++] = 0x20;
//		    space++;
//		}
//
//		/////////////////// APPENDING SPACES///////////////////
//		System.arraycopy(pData, 0, pBuff, 0, 38);
//
//		try {
//		    mmOutStream.write(0x1B);
//		    mmOutStream.write(0x4B);
//		    mmOutStream.write(0x0E);
//		    mmOutStream.flush();
//
//		    for (k = 0; k < 38; k++) {
//			mmOutStream.write(pBuff[k]);
//		    }
//		    mmOutStream.flush();
//		    //ReadPrinterresp();
//		} catch (IOException ex) {
//		    ex.printStackTrace();
//		}
//		return 1;
//	    }

	public int SendPrint_AnalogicsNEW(int[] pData, int pLength, int Font) throws IOException {

		Log.v("","SendPrint_Analogicsnewmethod");

		int[] pBuff = new int[1000];
		int n, lrc = 0, space = 0, i = 0, iBreak = 0, dataPack = 0, pPos = 0, pInc = 0;
		int iEvLength = 0;

		dataPack = pLength / 38 + 1;

		System.out.println(dataPack);
		space = pLength % 38;
		/////////////////// APPENDING SPACES///////////////////
		for (i = 0;; i++) {
			iBreak = space % 38;
			if (iBreak == 0) {
				break;
			}
			pData[pLength++] = 0x03;
			space++;
		}

		/////////////////// APPENDING SPACES///////////////////
		System.arraycopy(pData, 0, pBuff, 0, 38);

		try {
			mmOutStream.write(0x1B);
			mmOutStream.write(0x4B);
			mmOutStream.write(0x0E);
			mmOutStream.flush();

			for (k = 0; k < 38; k++) {
				mmOutStream.write(pBuff[k]);
			}
			mmOutStream.flush();
			//ReadPrinterresp();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		return 1;





	}


	public int SendPrint_Analogics(int[] pData, int pLength, int Font,boolean align) throws IOException {


		Log.v("","SendPrint_AnalogicsnewmethodpLengthsu"+pLength);

		int[] pBuff = new int[1000];
		int n, lrc = 0, space = 0, i = 0, iBreak = 0, pPos = 0, pInc = 0;
		//int  dataPack = 0;
		int iEvLength = 0;

		//dataPack = pLength / 38 + 1;

		//Log.v("","SendPrint_AnalogicsnewmethoddataPack"+dataPack);


		space = pLength % 38;

		Log.v("","SendPrint_Analogicsnewmethodspace"+space);
		/////////////////// APPENDING SPACES///////////////////
//		for (i = 0;; i++) {
//
//			iBreak = space % 38;
//
//			Log.v("","SendPrint_Analogicsnewmethodspace"+iBreak);
//			if (iBreak == 0) {
//				break;
//			}
//			pData[pLength++] = 0x20;
//			space++;
//		}

		/////////////////// APPENDING SPACES///////////////////
		System.arraycopy(pData, 0, pBuff, 0, 38);

		try {
//			mmOutStream.write(0x1B);
//			mmOutStream.write(0x4B);
//			mmOutStream.write(0x0E);

			if(align)
			{

				Log.v("","alignif"+align);
				//mmOutStream.write(0x1C);
			}
			else
			{
				Log.v("","alignelse"+align);
				//	mmOutStream.write(0x1D);

			}


			//	mmOutStream.flush();

			for (k = 0; k < 38; k++) {

				Log.v("","pBuff[k]"+pBuff[k]);
				mmOutStream.write(pBuff[k]);

			}
			mmOutStream.flush();
			//ReadPrinterresp();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		return 1;





	}


	private String toString(int dataPack) {
		// TODO Auto-generated method stub
		return null;
	}

	String stringToHex(String str) {
		char[] chars = str.toCharArray();
		StringBuffer strBuffer = new StringBuffer();
		for (int i = 0; i < chars.length; i++) {
			strBuffer.append(Integer.toHexString(chars[i]));
		}
		return strBuffer.toString();
	}

	public void printLogo_Analogics_Lok() {// Lok image
		String logo
		try {
			mmOutStream.write(0x1B);
			mmOutStream.write(0x23);
			mmOutStream.write(0x64);
			mmOutStream.write(0x30);
			mmOutStream.flush();

			byte[] logoBytes = UtilClass.HexStrToBytes(logo);
			mmOutStream.write(logoBytes);
			mmOutStream.flush();
		} catch (Exception e) {

		}

	}

	public void printLogo_Analogics_Annapurna() {
		Log.v("","printLogo_Analogics_Annapurnalogo");

		//print photo

			try {
				Resources res = MfimoApp.getAppContext().getResources();
				int id = R.drawable.ppfm;
				Bitmap bmp = BitmapFactory.decodeResource(res, id);
				//Bitmap bmp =  BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);
				if(bmp!=null){
					byte[] command = UtilsClass.decodeBitmap(bmp);
					outputStream.write(PrinterCommands.ESC_ALIGN_CENTER);
					printText(command);
				}else{
					Log.e("Print Photo error", "the file isn't exists");
				}
			} catch (Exception e) {
				e.printStackTrace();
				Log.e("PrintTools", "the file isn't exists");
			}




		Log.v("","printLogo_Analogics_Annapurna");
		// FFSL image
//		String logo = "";

//		String logo
//		try {
//			mmOutStream.write(0x1B);
//			mmOutStream.write(0x23);
//			mmOutStream.write(0x64);
//			mmOutStream.write(0x30);
//			mmOutStream.flush();
//
//			byte[] logoBytes = UtilClass.HexStrToBytes(logo);
//			mmOutStream.write(logoBytes);
//			mmOutStream.flush();
//		} catch (Exception e) {
//			e.printStackTrace();
//		}



	}
	private void printText(byte[] msg) {

		Log.v("","printText");
		try {
			// Print normal text
			outputStream.write(msg);
			printNewLine();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	private void printNewLine() {
		try {
			outputStream.write(PrinterCommands.FEED_LINE);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
}
